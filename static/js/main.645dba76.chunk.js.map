{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","console","log","TileLayer","url","attribution","data1","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","countires_props","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","useEffect","fetch","then","res","json","chartData","buildChartData","fetchData","lastDataPoint","date","newDataPoint","x","y","push","length","datasets","backgroundColor","borderColor","App","setCasesType","mapCountries","setMapCountries","tableData","setTableData","setCountries","setCountryInfo","setCountry","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","err","response","countires","name","iso2","newData","getCountries","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","CardContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.645dba76.chunk.js","sourcesContent":["import { Card ,CardContent,Typography} from '@material-ui/core'\r\nimport React from 'react'\r\nimport './InfoBox.css'\r\nfunction InfoBox({title,cases,total,active,isRed, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`InfoBox ${active && \"infoBox--seleted\"} ${isRed && 'infoBox--red'}`}>\r\n            <Typography className=\"InfoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n            <h2 className={`InfoBox__cases ${!isRed && \"infoBox--green\"}`}>{cases}</h2>\r\n            <Typography className=\"InfoBox__total\" color=\"textSecondary\">{total} Total</Typography>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {Circle,Popup} from 'react-leaflet';\r\n\r\n// Color Based on Case Type\r\nconst casesTypeColors={\r\n    cases:{\r\n        hex:\"#CC1034\",\r\n        multiplier:800,\r\n    },\r\n    recovered:{\r\n        hex:\"#7dd71d\",\r\n        multiplier:1200\r\n    },\r\n    deaths:{\r\n        hex:\"#fb4143\",\r\n        multiplier:2000,\r\n    },\r\n};\r\n\r\nexport const sortData=(data)=>{\r\n    const sortedData=[...data];\r\n    return sortedData.sort((a,b)=>a.cases>b.cases?-1:1);\r\n    \r\n}\r\n\r\nexport const prettyPrintStat=(stat)=>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n// DRAW circles on the map with interactive tooltip\r\nexport const showDataOnMap=(data1,casesType=\"cases\")=>\r\n\r\n        data1.map((country)=>(\r\n        <Circle\r\n            center={[country.countryInfo.lat,country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n        <Popup>\r\n            <div className=\"info-container\">\r\n                <div className=\"info-flag\" style={{backgroundImage:`url(${country.countryInfo.flag})`}}/>\r\n                <div className=\"info-name\">{country.country}</div>\r\n                <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0.0\")}</div>\r\n                <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0.0\")}</div>\r\n                <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0.0\")}</div>\r\n            </div>\r\n        </Popup>\r\n        </Circle>\r\n    ));\r\n\r\n","import React from 'react'\r\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet';\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './util.js';\r\n\r\nfunction Map({countries,casesType,center,zoom}) {\r\n    console.log(\"Map\",countries);\r\n    return (\r\n        <div className=\"map\">\r\n        <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n           attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n           />\r\n           \r\n           {showDataOnMap(countries,casesType)}\r\n        </LeafletMap>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react'\r\nimport './Table.css'\r\nfunction Table({countires_props}){\r\n    // console.log(\"From Table Component\",countries);\r\n    // return <div>Hello</div>\r\n    return (<div className=\"table\">\r\n            {countires_props.map(({country,cases})=>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{cases}</strong></td>\r\n                </tr>\r\n            ))}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React,{useEffect,useState} from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\n\r\nconst options={\r\n    legend:{\r\n        display:false,\r\n    },\r\n    elements:{\r\n        point:{\r\n            radius:0,\r\n        },\r\n    },\r\n    maintainAspectRatio:false,\r\n    tooltips:{\r\n        mode:\"index\",\r\n        intersect:false,\r\n        callbacks:{\r\n            label:function (tooltipItem,data){\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales:{\r\n        xAxes:[\r\n            {\r\n                type:\"time\",\r\n                time:{\r\n                    format:\"MM/DD/YY\",\r\n                    tooltipFormat:\"ll\"\r\n                },\r\n            },\r\n        ],\r\n        yAxes:[\r\n            {\r\n                gridLines:{\r\n                    display:false,\r\n                },\r\n                ticks:{\r\n                    // Include a doller sign in the ticks\r\n                    callback:function(value,index,values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\n\r\nfunction LineGraph({casesType='cases'}) {\r\n    console.log(casesType);\r\n    const [data,setData]=useState({});\r\n\r\n \r\n\r\n\r\n    useEffect(()=>{\r\n        const fetchData=async ()=>{\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((res)=>res.json())\r\n            .then((data)=>{\r\n                console.log(data);\r\n                const chartData=buildChartData(data);\r\n                setData(chartData);\r\n            });\r\n        }\r\n        fetchData();\r\n        \r\n    },[casesType])\r\n\r\n    const buildChartData=(data,casesType=\"cases\")=>{\r\n        const chartData=[];\r\n        let lastDataPoint;\r\n\r\n        for(let date in data.cases){\r\n            if(lastDataPoint){\r\n                const newDataPoint={\r\n                    x:date,\r\n                    y:data[casesType][date]-lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint=data[casesType][date];\r\n        }\r\n        return chartData;\r\n    }\r\n\r\n\r\n    return (\r\n        \r\n        <div>\r\n        {/* // check data even exist if no data return undefine */}\r\n        {/* data && data.length>0 ==>> data?.length */}\r\n        {data?.length>0 && (<div>\r\n            <Line options={options} data={{\r\n                datasets:[{\r\n                    backgroundColor:\"rgba(204,16,52,0.5)\",\r\n                    borderColor:\"#CC1034\",\r\n                    data:data}]\r\n            }}/></div>)}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\"\nimport Map from './Map';\nimport Table from './Table'\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph'\nimport \"leaflet/dist/leaflet.css\";\n\n\n\nfunction App() {\n\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [country, setCountry] = useState('worldwide');\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(res => res.json())\n      .then((data, err) => {\n        if (err) throw err;\n        setCountryInfo(data);\n      })\n\n  }, []);\n\n  useEffect(() => {\n    const getCountries = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n\n          const countires = data.map((country) => (\n            {\n              name: country.country, // INDIA,UNITED STATE\n              value: country.countryInfo.iso2\n            }));\n\n          setMapCountries(data);\n          const newData = sortData(data);\n\n          setTableData(newData);\n          setCountries(countires);\n        });\n    };\n    getCountries();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      })\n\n  };\n  console.log(\"Table data\", mapCountries);\n\n  return (\n    <div className=\"app\">\n\n      {/* app left start */}\n\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID 19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n              <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox isRed active={casesType === 'cases'} onClick={e => setCasesType('cases')} title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n          <InfoBox active={casesType === 'recovered'} onClick={e => setCasesType('recovered')} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n          <InfoBox isRed active={casesType === 'deaths'} onClick={e => setCasesType('deaths')} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n\n        <Map countries={mapCountries} casesType={casesType} center={mapCenter} zoom={mapZoom} />\n\n      </div>\n\n\n      {/* app right start */}\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3> Live Cases by Country</h3>\n          <Table countires_props={tableData} />\n          <h3>WorldWide new {casesType}</h3>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}